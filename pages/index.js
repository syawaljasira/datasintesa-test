import { Fragment, useEffect, useState } from "react";
import Head from "next/head";
import axios from "axios";
import Navbar from "../components/Navbar";
import styles from "../styles/Home.module.scss";
import Card from "../components/Card";
import UserDetail from "../components/UserDetail";

export default function Home() {
  const [data, setData] = useState([]);
  const [isLoading, setLoading] = useState(false);
  const [nation, setNation] = useState("ALL");
  const [userDetail, setUserDetail] = useState({});
  const [showDetail, setShowDetail] = useState(false);

  // Simple Pagination
  let pageLimit = 5;
  let dataLimit = 8;
  const [pages, setPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);

  function goToNextPage() {
    setCurrentPage((page) => page + 1);
  }

  function goToPreviousPage() {
    setCurrentPage((page) => page - 1);
  }

  function changePage(e) {
    const pageNumber = Number(e.target.textContent);
    setCurrentPage(pageNumber);
  }

  const getPaginatedData = () => {
    const startIndex = currentPage * dataLimit - dataLimit;
    const endIndex = startIndex + dataLimit;
    return data.slice(startIndex, endIndex);
  };

  const getPaginationGroup = () => {
    let start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;
    return new Array(pageLimit).fill().map((_, idx) => start + idx + 1);
  };

  function toggleDetail() {
    setShowDetail(!showDetail);
  }

  useEffect(() => {
    setLoading(true);
    const fetchUser = async () => {
      await axios
        .get("https://randomuser.me/api/?page=1&results=40")
        .then(({ data }) => {
          setData(data.results);
          setLoading(false);
          setPages(Math.round(data.results.length / dataLimit));
        });
    };
    const fetchUserByNation = async () => {
      await axios
        .get(
          `https://randomuser.me/api/?page=1&results=40&nat=${nation.toLowerCase()}`
        )
        .then(({ data }) => {
          setData(data.results);
          setLoading(false);
          setPages(Math.round(data.results.length / dataLimit));
        });
    };

    if (nation !== "ALL") {
      fetchUserByNation();
    } else {
      fetchUser();
    }
  }, [nation]);

  if (isLoading) {
    return (
      <div>
        <Head>
          <title>Datasintesa | Loading</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Navbar
          nation={nation}
          setNation={setNation}
          setCurrentPage={setCurrentPage}
        />
        <p className={styles.loading}>Loading...</p>
      </div>
    );
  }

  if (!data) {
    return (
      <div>
        <Head>
          <title>Datasintesaa | No User Data</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Navbar
          nation={nation}
          setNation={setNation}
          setCurrentPage={setCurrentPage}
        />
        <p className={styles.no_data}>No User Data...</p>
      </div>
    );
  }

  console.log(data);
  return (
    <div className={styles.home}>
      <Head>
        <title>Datasintesa | Front End Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <UserDetail
        user={Object.keys(userDetail).length !== 0 ? userDetail : null}
        showDetail={showDetail}
        toggleDetail={toggleDetail}
      />
      <Navbar
        nation={nation}
        setNation={setNation}
        setCurrentPage={setCurrentPage}
      />

      <main className={styles.main}>
        <div className={styles.main__list}>
          {getPaginatedData()
            .slice(0, 8)
            .map((user, idx) => {
              return (
                <Fragment key={idx}>
                  <Card
                    user={user}
                    setUserDetail={setUserDetail}
                    toggleDetail={toggleDetail}
                  />
                </Fragment>
              );
            })}
          <div id="pagination" className={styles.pagination}>
            <button
              disabled={currentPage === 1 ? true : false}
              onClick={goToPreviousPage}
              className={`${currentPage === 1 ? styles.disabled : null}`}
            >
              prev
            </button>
            <div className={styles.pagination_group}>
              {getPaginationGroup().map((item, index) => (
                <button
                  key={index}
                  onClick={changePage}
                  className={`${
                    currentPage === item ? styles.page_active : null
                  }`}
                >
                  <span>{item}</span>
                </button>
              ))}
            </div>
            <button
              disabled={currentPage === pages ? true : false}
              onClick={goToNextPage}
              className={`${currentPage === pages ? styles.disabled : null}`}
            >
              next
            </button>
          </div>
        </div>
      </main>
    </div>
  );
}
